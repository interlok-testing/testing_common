ext {
    interlokParentGradle = "https://raw.githubusercontent.com/adaptris/interlok-build-parent/main/v5/build.gradle"
    interlokVersion = '5.0-SNAPSHOT'
    // Include the WAR file since by default it is excluded.
    includeWar='true'
    junitJupiterVersion = '5.11.4'
    apacheHttpComponentsVersion = '5.3.3'
    apacheHttpComponentsClientVersion = '5.1.4'
    testContainersVersion = "1.20.4"
    interlokLicenseGeneratorVersion = "0.1"
}
def interlokLicenseGeneratorCloneDir = "${buildDir}/interlok-license-generator"


allprojects {
    apply from: "${interlokParentGradle}"
}

dependencies {
    implementation ("org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion")
    implementation ("org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion")
    implementation ("org.apache.httpcomponents.core5:httpcore5:$apacheHttpComponentsVersion")
    implementation ("org.apache.httpcomponents.client5:httpclient5:$apacheHttpComponentsClientVersion")
    implementation ("org.apache.httpcomponents.client5:httpclient5-testing:$apacheHttpComponentsClientVersion")
    implementation "org.testcontainers:testcontainers:$testContainersVersion"
    implementation "org.testcontainers:junit-jupiter:$testContainersVersion"
    implementation "com.adaptris:interlok-service-tester:$interlokVersion"
    implementation group: "com.adaptris.license", name: "interlok-license-generator", version: "0.1"
    implementation fileTree(dir: "$buildDir/distribution/lib", include: ['*.jar'])
}

repositories {
    mavenLocal()
}

test {
    useJUnitPlatform()
}

tasks.named("assemble") {
    dependsOn("buildLicenseGeneratorIfNeeded")
}

def buildLicenseGeneratorIfNeeded = tasks.register("buildLicenseGeneratorIfNeeded") {
    def testConfigs = configurations.findAll {
        ["testRuntime", "testImplementation"].contains(it.name)
    }
    if (testConfigs.allDependencies.flatten().find { it.group == 'com.adaptris.license' && it.name == 'interlok-license-generator'}) {
        it.finalizedBy(["cloneLicenseGeneratorRepo", "buildLicenseGenerator"])
    }
}

def buildLicenseGenerator = tasks.register("buildLicenseGenerator", GradleBuild) {
    dir = new File(interlokLicenseGeneratorCloneDir)
    tasks = ["publishToMavenLocal"]
    mustRunAfter("cloneLicenseGeneratorRepo")
}


def functionalTest = tasks.register('functionalTest', Test) {
    useJUnitPlatform()
    if (interlokServiceTest) interlokServiceTest.enabled = false
    if (interlokServiceTestReport) interlokServiceTestReport.enabled = false
    if (interlokVerifyConfigCheck) interlokVerifyConfigCheck.enabled = false
    dependsOn tasks.named('installDist')
    mustRunAfter tasks.named('installDist')
    workingDir = file("$buildDir/distribution")

    def inputFile = new File(interlokServiceTestDefinition)
    if (inputFile.exists()) {
        if (interlokServiceTest) interlokServiceTest.enabled = true
        if (interlokServiceTestReport) interlokServiceTestReport.enabled = true
        if (interlokVerifyConfigCheck) interlokVerifyConfigCheck.enabled = true
        dependsOn tasks.named("interlokServiceTest")
    }
}